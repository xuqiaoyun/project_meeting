<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.etc.dao.MessageMapper">
	<resultMap id="BaseResultMap" type="com.etc.entity.Message">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="contentFact" jdbcType="VARCHAR" property="contentfact" />
		<result column="meetingId" jdbcType="INTEGER" property="meetingid" />
		<result column="collectionId" jdbcType="INTEGER" property="collectionid" />
		<result column="sendId" jdbcType="INTEGER" property="sendid" />
		<result column="MLocalTime" jdbcType="VARCHAR" property="mlocaltime" />
		<result column="status" jdbcType="INTEGER" property="status" />
	</resultMap>
	<sql id="Base_Column_List">
		id, contentFact, meetingId, collectionId, sendId,
		MLocalTime, status
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from message
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		message
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.etc.entity.Message">
		insert into message (id,
		contentFact, meetingId,
		collectionId, sendId, MLocalTime,
		status)
		values
		(#{id,jdbcType=INTEGER}, #{contentfact,jdbcType=VARCHAR},
		#{meetingid,jdbcType=INTEGER},
		#{collectionid,jdbcType=INTEGER},
		#{sendid,jdbcType=INTEGER}, #{mlocaltime,jdbcType=VARCHAR},
		#{status,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="com.etc.entity.Message">
		insert into message
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="contentfact != null">
				contentFact,
			</if>
			<if test="meetingid != null">
				meetingId,
			</if>
			<if test="collectionid != null">
				collectionId,
			</if>
			<if test="sendid != null">
				sendId,
			</if>
			<if test="mlocaltime != null">
				MLocalTime,
			</if>
			<if test="status != null">
				status,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="contentfact != null">
				#{contentfact,jdbcType=VARCHAR},
			</if>
			<if test="meetingid != null">
				#{meetingid,jdbcType=INTEGER},
			</if>
			<if test="collectionid != null">
				#{collectionid,jdbcType=INTEGER},
			</if>
			<if test="sendid != null">
				#{sendid,jdbcType=INTEGER},
			</if>
			<if test="mlocaltime != null">
				#{mlocaltime,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				#{status,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.etc.entity.Message">
		update message
		<set>
			<if test="contentfact != null">
				contentFact = #{contentfact,jdbcType=VARCHAR},
			</if>
			<if test="meetingid != null">
				meetingId = #{meetingid,jdbcType=INTEGER},
			</if>
			<if test="collectionid != null">
				collectionId = #{collectionid,jdbcType=INTEGER},
			</if>
			<if test="sendid != null">
				sendId = #{sendid,jdbcType=INTEGER},
			</if>
			<if test="mlocaltime != null">
				MLocalTime = #{mlocaltime,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.etc.entity.Message">
		update message
		set
		contentFact = #{contentfact,jdbcType=VARCHAR},
		meetingId =
		#{meetingid,jdbcType=INTEGER},
		collectionId =
		#{collectionid,jdbcType=INTEGER},
		sendId = #{sendid,jdbcType=INTEGER},
		MLocalTime = #{mlocaltime,jdbcType=VARCHAR},
		status =
		#{status,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<delete id="deleteMessageById" parameterType="java.lang.String">
		delete from message where id in
		<foreach item="item" collection="list" open="(" separator=","
			close=")">
			#{item,jdbcType=VARCHAR}
		</foreach>
	</delete>
	<insert id="addMessage" parameterType="com.etc.entity.Message">
		insert into message (id,
		contentFact, meetingId,
		collectionId, sendId,
		MLocalTime,
		status) values
		<!-- 动态SQL之foreach的用法 -->
		<!-- collection="users" 用于指定循环集合的名称，如果接口中并未指定参数别名，那么默认就是list item="u" 用于指定每次循环后的对象的别名 
			separator="," 用于指定每次循环后之间的分割符 -->
		<foreach collection="list" item="m" separator=",">
			(#{m.id,jdbcType=INTEGER}, #{m.contentfact,jdbcType=VARCHAR},
			#{m.meetingid,jdbcType=INTEGER},
			#{m.collectionid,jdbcType=INTEGER},
			#{m.sendid,jdbcType=INTEGER}, #{m.mlocaltime,jdbcType=VARCHAR},
			#{m.status,jdbcType=INTEGER})
		</foreach>
	</insert>
	<select id="selectMessageByAll" parameterType="java.util.Map"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from message
		<trim prefix="where" prefixOverrides="and|or">
			<if test="meetingId!=null">
				AND meetingId like #{meetingId}
			</if>
			<if test="collectionid!=null">
				AND collectionid=#{collectionid}
			</if>
			<if test="sendid!=null">
				AND sendid like #{sendid}
			</if>
			<if test="status!=null">
				AND status like #{status}
			</if>
			<if test="big!=null">
				group by meetingId 
			</if>
		</trim>
		order by id desc limit #{start},#{pageSize} 
	</select>
</mapper>